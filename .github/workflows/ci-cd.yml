name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install dependencies
      run: uv sync
      
    - name: Run tests
      run: make test

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract version from pyproject.toml
      id: version
      run: |
        VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Found version: $VERSION"
        
    - name: Check if version already exists in GHCR
      id: check_version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        
        # Check if the version tag already exists in GitHub Container Registry
        echo "Checking if $IMAGE_NAME:v$VERSION exists in GHCR..."
        
        # Use GitHub API to check if the image exists
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${{ github.event.repository.name }}/versions" \
        )
        
        if [ "$RESPONSE" = "200" ]; then
          # Get package versions and check if our version exists
          VERSION_EXISTS=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${{ github.event.repository.name }}/versions" \
            | jq -r --arg version "v$VERSION" '.[] | select(.metadata.container.tags[]? == $version) | .metadata.container.tags[]' \
            | grep -x "v$VERSION" || echo "")
          
          if [ -n "$VERSION_EXISTS" ]; then
            echo "Version v$VERSION already exists in GHCR, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Version v$VERSION does not exist in GHCR, proceeding with build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "Could not check GHCR packages (HTTP $RESPONSE), proceeding with build"
          echo "should_build=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Extract metadata
      id: meta
      if: steps.check_version.outputs.should_build == 'true'
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=v${{ steps.version.outputs.version }}
          type=raw,value=latest
          
    - name: Build and push Docker image
      if: steps.check_version.outputs.should_build == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Skip build (version exists)
      if: steps.check_version.outputs.should_build == 'false'
      run: |
        echo "Skipping Docker build as version v${{ steps.version.outputs.version }} already exists"
        
    - name: Create GitHub Release
      if: steps.check_version.outputs.should_build == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## üê≥ Docker Image
          
          This release includes a new Docker image available at:
          ```
          ghcr.io/${{ github.repository }}:v${{ steps.version.outputs.version }}
          ghcr.io/${{ github.repository }}:latest
          ```
          
          ## üöÄ Quick Start
          
          ```bash
          docker run -d \
            -v /volume3/Camera-Name:/input/Camera-Name \
            -v /volume1/organized:/output \
            ghcr.io/${{ github.repository }}:v${{ steps.version.outputs.version }}
          ```
          
          ## üìã Changes
          
          See the [commits](https://github.com/${{ github.repository }}/commits/v${{ steps.version.outputs.version }}) for detailed changes in this release.
          
          ## üìñ Documentation
          
          For full documentation and configuration options, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
        draft: false
        prerelease: false